#!/bin/bash

# üöÄ Script de Instala√ß√£o Autom√°tica do Cron para Repair Balances
# Executa: chmod +x install-cron.sh && ./install-cron.sh

set -e  # Para na primeira falha

echo "üöÄ Iniciando instala√ß√£o autom√°tica do cron repair-balances..."

# Detectar diret√≥rio atual
CURRENT_DIR="$(pwd)"
BACKEND_DIR="$CURRENT_DIR"

# Verificar se estamos no diret√≥rio correto
if [ ! -f "package.json" ] || [ ! -d "src/scripts" ]; then
    echo "‚ùå ERRO: Execute este script no diret√≥rio backend-vizzion"
    echo "   Exemplo: cd /path/to/backend-vizzion && ./install-cron.sh"
    exit 1
fi

echo "‚úÖ Diret√≥rio correto detectado: $BACKEND_DIR"

# 1. Compilar o projeto
echo "üì¶ Compilando projeto TypeScript..."
npm run build
if [ $? -ne 0 ]; then
    echo "‚ùå ERRO: Falha na compila√ß√£o"
    exit 1
fi
echo "‚úÖ Projeto compilado com sucesso"

# 2. Verificar se script compilado existe
if [ ! -f "dist/scripts/repair-balances-cron.js" ]; then
    echo "‚ùå ERRO: Script compilado n√£o encontrado"
    exit 1
fi
echo "‚úÖ Script compilado encontrado"

# 3. Criar diret√≥rio de logs
LOG_DIR="/var/log/vizzionbot"
echo "üìÅ Criando diret√≥rio de logs: $LOG_DIR"
sudo mkdir -p "$LOG_DIR"
sudo chown $(whoami):$(id -gn) "$LOG_DIR" 2>/dev/null || true
echo "‚úÖ Diret√≥rio de logs criado"

# 4. Dar permiss√£o ao script shell
echo "üîß Configurando permiss√µes..."
chmod +x "$BACKEND_DIR/scripts/repair-balances-cron.sh"
echo "‚úÖ Permiss√µes configuradas"

# 5. Testar execu√ß√£o do script
echo "üß™ Testando execu√ß√£o do script..."
"$BACKEND_DIR/scripts/repair-balances-cron.sh"
if [ $? -ne 0 ]; then
    echo "‚ùå ERRO: Falha no teste do script"
    exit 1
fi
echo "‚úÖ Script testado com sucesso"

# 6. Verificar se j√° existe no crontab
CRON_LINE="*/20 * * * * $BACKEND_DIR/scripts/repair-balances-cron.sh"
if crontab -l 2>/dev/null | grep -q "repair-balances-cron.sh"; then
    echo "‚ö†Ô∏è  Cron job j√° existe, removendo vers√£o anterior..."
    crontab -l 2>/dev/null | grep -v "repair-balances-cron.sh" | crontab -
fi

# 7. Adicionar ao crontab
echo "‚è∞ Adicionando ao crontab (a cada 20 minutos)..."
(crontab -l 2>/dev/null; echo "$CRON_LINE") | crontab -
echo "‚úÖ Cron job adicionado com sucesso"

# 8. Verificar se foi adicionado
echo "üîç Verificando crontab..."
if crontab -l | grep -q "repair-balances-cron.sh"; then
    echo "‚úÖ Cron job verificado no crontab"
else
    echo "‚ùå ERRO: Cron job n√£o foi adicionado"
    exit 1
fi

# 9. Verificar status do servi√ßo cron
echo "üîç Verificando servi√ßo cron..."
if command -v systemctl >/dev/null 2>&1; then
    # Linux com systemd
    if systemctl is-active --quiet cron 2>/dev/null || systemctl is-active --quiet crond 2>/dev/null; then
        echo "‚úÖ Servi√ßo cron est√° ativo"
    else
        echo "‚ö†Ô∏è  Iniciando servi√ßo cron..."
        sudo systemctl start cron 2>/dev/null || sudo systemctl start crond 2>/dev/null || true
    fi
elif command -v service >/dev/null 2>&1; then
    # Linux com service
    if service cron status >/dev/null 2>&1; then
        echo "‚úÖ Servi√ßo cron est√° ativo"
    else
        echo "‚ö†Ô∏è  Iniciando servi√ßo cron..."
        sudo service cron start 2>/dev/null || true
    fi
elif [[ "$OSTYPE" == "darwin"* ]]; then
    # macOS
    echo "‚úÖ macOS detectado - cron nativo ativo"
else
    echo "‚ö†Ô∏è  N√£o foi poss√≠vel verificar status do cron"
fi

# 10. Mostrar informa√ß√µes finais
echo ""
echo "üéâ INSTALA√á√ÉO CONCLU√çDA COM SUCESSO!"
echo ""
echo "üìã RESUMO:"
echo "   ‚Ä¢ Script: repair-balances-cron.js"
echo "   ‚Ä¢ Frequ√™ncia: A cada 20 minutos"
echo "   ‚Ä¢ Log: /var/log/vizzionbot/repair-balances.log"
echo "   ‚Ä¢ Pr√≥xima execu√ß√£o: $(date -d '+20 minutes' '+%H:%M' 2>/dev/null || date -v+20M '+%H:%M' 2>/dev/null || echo 'em 20 minutos')"
echo ""
echo "üîß COMANDOS √öTEIS:"
echo "   ‚Ä¢ Ver cron jobs:    crontab -l"
echo "   ‚Ä¢ Ver logs:         tail -f /var/log/vizzionbot/repair-balances.log"
echo "   ‚Ä¢ Testar script:    $BACKEND_DIR/scripts/repair-balances-cron.sh"
echo "   ‚Ä¢ Remover cron:     crontab -e (deletar linha manualmente)"
echo ""
echo "‚è∞ O script j√° est√° rodando automaticamente a cada 20 minutos!"
echo "   Aguarde at√© o pr√≥ximo m√∫ltiplo de 20 minutos para ver a primeira execu√ß√£o."
echo ""

# 11. Mostrar pr√≥ximos hor√°rios de execu√ß√£o
echo "üìÖ PR√ìXIMAS EXECU√á√ïES:"
current_minute=$(date +%M)
current_hour=$(date +%H)

for i in {1..5}; do
    # Calcular pr√≥ximo m√∫ltiplo de 20
    next_minute=$((($current_minute / 20 + $i) * 20 % 60))
    next_hour=$(($current_hour + ($current_minute / 20 + $i) * 20 / 60))
    next_hour=$(($next_hour % 24))
    
    printf "   ‚Ä¢ %02d:%02d\n" $next_hour $next_minute
done

echo ""
echo "‚úÖ Instala√ß√£o finalizada! O cron est√° ativo e funcionando."

